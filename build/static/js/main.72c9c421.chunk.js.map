{"version":3,"sources":["components/LoadingScreen/LoadingScreen.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["LoadingScreen","props","className","dark","Top","React","lazy","AboutMe","MyTools","MyWork","Credentials","Contact","MenuNonMobile","MenuMobile","MenuButton","Notification","DarkModeToggle","App","scrollTimeout","useState","activeSection","setActiveSection","notification","setNotification","JSON","parse","localStorage","getItem","isDark","setIsDark","isMobileMenu","setIsMobileMenu","menuItems","name","id","scrollThrottler","setTimeout","sectionList","document","getElementsByClassName","Array","from","forEach","section","activeId","isInViewport","checkActiveSection","elem","bounding","getBoundingClientRect","screenHeight","window","innerHeight","documentElement","clientHeight","top","newNotification","message","toggleMenu","prevValue","useEffect","addEventListener","removeEventListener","setItem","fallback","visible","toggleTheme","onChange","checked","size","text","dNone","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.72c9c421.chunk.js","sourcesContent":["import React from 'react';\nimport './loadingscreen.styles.scss';\n\nfunction LoadingScreen(props) {\n  return (\n    <div className={`loading-screen ${props.dark && \"invert\"}`}>\n      <div className=\"loading-ball\" />\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","import React,{ useEffect,useState,Suspense } from 'react';\nimport './main.styles.scss';\nimport './main.responsive.scss';\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen';\n\nconst Top = React.lazy(() => import('./Top/Top'));\nconst AboutMe = React.lazy(() => import('./AboutMe/AboutMe'));\nconst MyTools = React.lazy(() => import('./MyTools/MyTools'));\nconst MyWork = React.lazy(() => import('./MyWork/MyWork'));\nconst Credentials = React.lazy(() => import('./Credentials/Credentials'));\nconst Contact = React.lazy(() => import('./Contact/Contact'));\nconst MenuNonMobile = React.lazy(() => import('./components/MenuNonMobile/MenuNonMobile'));\nconst MenuMobile = React.lazy(() => import('./components/MenuMobile/MenuMobile'));\nconst MenuButton = React.lazy(() => import('./components/MenuButton/MenuButton'));\nconst Notification = React.lazy(() => import('./components/Notification/Notification'));\nconst DarkModeToggle = React.lazy(() => import('react-dark-mode-toggle'));\n\nfunction App() {\n\n  let [activeSection,setActiveSection] = useState(\"top\");\n  let [notification,setNotification] = useState(false);\n  let [isDark,setIsDark] = useState(JSON.parse(localStorage.getItem(\"theme\")) || false);\n  let [isMobileMenu,setIsMobileMenu] = useState(false);\n\n  let menuItems = [\n    {name:'Top', id:'top'},\n    {name:'About me', id:'about-me'},\n    {name:'My tools', id:'my-tools'},\n    {name:'My work', id:'my-work'},\n    {name:'Credentials', id:'credentials'},\n    {name:'Contact', id:'contact'}\n  ];\n\n  var scrollTimeout;\n  function scrollThrottler() {\n    if ( !scrollTimeout ) {\n      scrollTimeout = setTimeout(function() {\n        scrollTimeout = null;\n        checkActiveSection();\n       }, 66);\n    }\n  }\n\n  function checkActiveSection() {\n    let sectionList = document.getElementsByClassName(\"section\");\n    let sectionArr = Array.from(sectionList);\n    sectionArr.forEach( (section) => {\n      let activeId = isInViewport(section);\n      if (activeId && activeId!==activeSection) {\n        setActiveSection(activeId);\n      }\n    });\n  }\n\n  let isInViewport = function (elem) {\n      let bounding = elem.getBoundingClientRect();\n      let screenHeight = window.innerHeight || document.documentElement.clientHeight;\n      if ( bounding.top > -300 && bounding.top*2 <= (screenHeight)) {\n        return elem.id;\n      }\n      else {\n        return false;\n      }\n  };\n\n  function newNotification(message) {\n    setNotification(message);\n  }\n\n  function toggleMenu() {\n    setIsMobileMenu(prevValue => !prevValue);\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollThrottler, false);\n    return function cleanUp() {\n      window.removeEventListener(\"scroll\", scrollThrottler, false);\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\",isDark);\n  },[isDark]);\n\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<LoadingScreen dark={isDark} />}>\n        <div className={`landscape-small ${isDark && \"invert\"}`}>\n          <p>Please switch to portrait mode</p>\n        </div>\n        <MenuButton toggleMenu={toggleMenu} />\n        <MenuNonMobile\n          menuItems={menuItems}\n          activeSection={activeSection}\n          dark={isDark}\n        />\n        <MenuMobile\n          menuItems={menuItems}\n          activeSection={activeSection}\n          dark={isDark}\n          visible={isMobileMenu}\n          toggleMenu={toggleMenu}\n          toggleTheme={setIsDark}\n        />\n        <div className=\"dark-mode-toggle\">\n          <DarkModeToggle\n          onChange={setIsDark}\n          checked={isDark}\n          size={50}\n          />\n        </div>\n        <Notification text={notification} dNone={!notification && \"d-none\"} newNotification={(message) => newNotification(message)} />\n        <Top dark={isDark} />\n        <div className={`theme-container ${isDark && \"invert\"}`}>\n          <AboutMe dark={isDark} />\n          <MyTools dark={isDark} />\n          <MyWork dark={isDark} />\n          <Credentials dark={isDark} />\n          <Contact dark={isDark} newNotification={(message) => newNotification(message)} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}